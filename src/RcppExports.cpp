// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// firstderiv_i
arma::vec firstderiv_i(const arma::vec& parameters, const double& b, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_firstderiv_i(SEXP parametersSEXP, SEXP bSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(firstderiv_i(parameters, b, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// g0bmat
arma::mat g0bmat(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_g0bmat(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(g0bmat(rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// NormalConstant
arma::vec NormalConstant(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_NormalConstant(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(NormalConstant(rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// uijq
arma::field<arma::mat> uijq(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_uijq(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(uijq(rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// Q1
double Q1(const arma::vec& parameters, const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r, const arma::mat& g0bvalue, const arma::vec& normalconstant, const arma::field<arma::mat>& uijqmat, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Q1(SEXP parametersSEXP, SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP g0bvalueSEXP, SEXP normalconstantSEXP, SEXP uijqmatSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type g0bvalue(g0bvalueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type normalconstant(normalconstantSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type uijqmat(uijqmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Q1(parameters, rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r, g0bvalue, normalconstant, uijqmat, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// Q2
double Q2(const arma::vec& parameters, const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r, const arma::mat& g0bvalue, const arma::vec& normalconstant, const arma::field<arma::mat>& uijqmat, const double& tunepar, const arma::mat& R, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Q2(SEXP parametersSEXP, SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP g0bvalueSEXP, SEXP normalconstantSEXP, SEXP uijqmatSEXP, SEXP tuneparSEXP, SEXP RSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type g0bvalue(g0bvalueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type normalconstant(normalconstantSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type uijqmat(uijqmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type tunepar(tuneparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Q2(parameters, rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r, g0bvalue, normalconstant, uijqmat, tunepar, R, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodfunc_i
double likelihoodfunc_i(const double& b, const arma::vec& parameters, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_likelihoodfunc_i(SEXP bSEXP, SEXP parametersSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodfunc_i(b, parameters, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// Loglikelihood
double Loglikelihood(const arma::vec& parameters, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim, const double& tunepar, const arma::mat& R, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Loglikelihood(SEXP parametersSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP tuneparSEXP, SEXP RSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const double& >::type tunepar(tuneparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Loglikelihood(parameters, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim, tunepar, R, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihoodtest
double loglikelihoodtest(const arma::vec& parameters, const double& b, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_loglikelihoodtest(SEXP parametersSEXP, SEXP bSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihoodtest(parameters, b, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// logcauchy
double logcauchy(const arma::vec& parameters);
RcppExport SEXP _CRFCSD_logcauchy(SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(logcauchy(parameters));
    return rcpp_result_gen;
END_RCPP
}
// penaltyterm
double penaltyterm(const arma::vec& psi, const double& lambda, const arma::mat& R);
RcppExport SEXP _CRFCSD_penaltyterm(SEXP psiSEXP, SEXP lambdaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(penaltyterm(psi, lambda, R));
    return rcpp_result_gen;
END_RCPP
}
// firstderiv_icure
arma::vec firstderiv_icure(const arma::vec& parameters, const double& b, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_firstderiv_icure(SEXP parametersSEXP, SEXP bSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(firstderiv_icure(parameters, b, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// g0bcure
double g0bcure(const double& b, const arma::vec& beta, const arma::vec& gamma, const double& eta0, const double& theta, const int& betadim, const int& gammadim, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const arma::vec& psi, const arma::mat& blC, const double& r, const int& ni);
RcppExport SEXP _CRFCSD_g0bcure(SEXP bSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP eta0SEXP, SEXP thetaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP niSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    rcpp_result_gen = Rcpp::wrap(g0bcure(b, beta, gamma, eta0, theta, betadim, gammadim, Delta, X, Z, psi, blC, r, ni));
    return rcpp_result_gen;
END_RCPP
}
// g0bmatcure
arma::mat g0bmatcure(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const double& eta0, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_g0bmatcure(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP eta0SEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(g0bmatcure(rules, beta, gamma, eta0, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// NormalConstantcure
arma::vec NormalConstantcure(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const double& eta0, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_NormalConstantcure(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP eta0SEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(NormalConstantcure(rules, beta, gamma, eta0, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// uicure
arma::vec uicure(const double& b, const arma::vec& beta, const arma::vec& gamma, const double& eta0, const double& theta, const int& betadim, const int& gammadim, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const arma::vec& psi, const arma::mat& blC, const double& r, const int& ni);
RcppExport SEXP _CRFCSD_uicure(SEXP bSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP eta0SEXP, SEXP thetaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP niSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    rcpp_result_gen = Rcpp::wrap(uicure(b, beta, gamma, eta0, theta, betadim, gammadim, Delta, X, Z, psi, blC, r, ni));
    return rcpp_result_gen;
END_RCPP
}
// uijqcure
arma::field<arma::mat> uijqcure(const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const double& eta0, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r);
RcppExport SEXP _CRFCSD_uijqcure(SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP eta0SEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(uijqcure(rules, beta, gamma, eta0, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r));
    return rcpp_result_gen;
END_RCPP
}
// Q1cure
double Q1cure(const double& parameters, const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r, const arma::mat& g0bvalue, const arma::vec& normalconstant, const arma::field<arma::mat>& uijqmat, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Q1cure(SEXP parametersSEXP, SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP g0bvalueSEXP, SEXP normalconstantSEXP, SEXP uijqmatSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type g0bvalue(g0bvalueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type normalconstant(normalconstantSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type uijqmat(uijqmatSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Q1cure(parameters, rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r, g0bvalue, normalconstant, uijqmat, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// Q2cure
double Q2cure(const arma::vec& parameters, const arma::mat& rules, const arma::vec& beta, const arma::vec& gamma, const arma::vec& eta, const double& theta, const arma::field<arma::vec>& Delta, const int& betadim, const int& gammadim, const int& n, const arma::vec& ni, const arma::field<arma::mat>& X, const arma::mat& Z, const arma::vec& psi, const arma::field<arma::mat>& blC, const double& r, const arma::mat& g0bvalue, const arma::vec& normalconstant, const arma::field<arma::mat>& uijqmat, const double& tunepar, const arma::mat& R, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Q2cure(SEXP parametersSEXP, SEXP rulesSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP thetaSEXP, SEXP DeltaSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP nSEXP, SEXP niSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP blCSEXP, SEXP rSEXP, SEXP g0bvalueSEXP, SEXP normalconstantSEXP, SEXP uijqmatSEXP, SEXP tuneparSEXP, SEXP RSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type g0bvalue(g0bvalueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type normalconstant(normalconstantSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type uijqmat(uijqmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type tunepar(tuneparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Q2cure(parameters, rules, beta, gamma, eta, theta, Delta, betadim, gammadim, n, ni, X, Z, psi, blC, r, g0bvalue, normalconstant, uijqmat, tunepar, R, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodfunccure
double likelihoodfunccure(const double& b, const arma::vec& parameters, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_likelihoodfunccure(SEXP bSEXP, SEXP parametersSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodfunccure(b, parameters, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// Loglikelihoodcure
double Loglikelihoodcure(const arma::vec& parameters, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim, const double& tunepar, const arma::mat& R, const bool& Cauchyindex);
RcppExport SEXP _CRFCSD_Loglikelihoodcure(SEXP parametersSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP tuneparSEXP, SEXP RSEXP, SEXP CauchyindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const double& >::type tunepar(tuneparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Cauchyindex(CauchyindexSEXP);
    rcpp_result_gen = Rcpp::wrap(Loglikelihoodcure(parameters, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim, tunepar, R, Cauchyindex));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihoodtestcure
double loglikelihoodtestcure(const arma::vec& parameters, const double& b, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_loglikelihoodtestcure(SEXP parametersSEXP, SEXP bSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihoodtestcure(parameters, b, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodfunc1
double likelihoodfunc1(const double& b, const arma::vec& parameters, const arma::vec& Delta, const arma::mat& X, const arma::vec& Z, const int& ni, const double& r, const arma::mat& blC, const int& betadim, const int& gammadim);
RcppExport SEXP _CRFCSD_likelihoodfunc1(SEXP bSEXP, SEXP parametersSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodfunc1(b, parameters, Delta, X, Z, ni, r, blC, betadim, gammadim));
    return rcpp_result_gen;
END_RCPP
}
// testquadrature1
double testquadrature1(const arma::vec& parameters, const arma::mat& rules, const arma::field<arma::vec>& Delta, const arma::field<arma::vec>& X, const arma::mat& Z, const int& n, const arma::vec& ni, const double& r, const arma::field<arma::mat>& blC, const int& betadim, const int& gammadim, const arma::vec& weight);
RcppExport SEXP _CRFCSD_testquadrature1(SEXP parametersSEXP, SEXP rulesSEXP, SEXP DeltaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP nSEXP, SEXP niSEXP, SEXP rSEXP, SEXP blCSEXP, SEXP betadimSEXP, SEXP gammadimSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rules(rulesSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type blC(blCSEXP);
    Rcpp::traits::input_parameter< const int& >::type betadim(betadimSEXP);
    Rcpp::traits::input_parameter< const int& >::type gammadim(gammadimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(testquadrature1(parameters, rules, Delta, X, Z, n, ni, r, blC, betadim, gammadim, weight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CRFCSD_firstderiv_i", (DL_FUNC) &_CRFCSD_firstderiv_i, 10},
    {"_CRFCSD_g0bmat", (DL_FUNC) &_CRFCSD_g0bmat, 15},
    {"_CRFCSD_NormalConstant", (DL_FUNC) &_CRFCSD_NormalConstant, 15},
    {"_CRFCSD_uijq", (DL_FUNC) &_CRFCSD_uijq, 15},
    {"_CRFCSD_Q1", (DL_FUNC) &_CRFCSD_Q1, 20},
    {"_CRFCSD_Q2", (DL_FUNC) &_CRFCSD_Q2, 22},
    {"_CRFCSD_likelihoodfunc_i", (DL_FUNC) &_CRFCSD_likelihoodfunc_i, 10},
    {"_CRFCSD_Loglikelihood", (DL_FUNC) &_CRFCSD_Loglikelihood, 14},
    {"_CRFCSD_loglikelihoodtest", (DL_FUNC) &_CRFCSD_loglikelihoodtest, 10},
    {"_CRFCSD_logcauchy", (DL_FUNC) &_CRFCSD_logcauchy, 1},
    {"_CRFCSD_penaltyterm", (DL_FUNC) &_CRFCSD_penaltyterm, 3},
    {"_CRFCSD_firstderiv_icure", (DL_FUNC) &_CRFCSD_firstderiv_icure, 10},
    {"_CRFCSD_g0bcure", (DL_FUNC) &_CRFCSD_g0bcure, 14},
    {"_CRFCSD_g0bmatcure", (DL_FUNC) &_CRFCSD_g0bmatcure, 15},
    {"_CRFCSD_NormalConstantcure", (DL_FUNC) &_CRFCSD_NormalConstantcure, 15},
    {"_CRFCSD_uicure", (DL_FUNC) &_CRFCSD_uicure, 14},
    {"_CRFCSD_uijqcure", (DL_FUNC) &_CRFCSD_uijqcure, 15},
    {"_CRFCSD_Q1cure", (DL_FUNC) &_CRFCSD_Q1cure, 20},
    {"_CRFCSD_Q2cure", (DL_FUNC) &_CRFCSD_Q2cure, 22},
    {"_CRFCSD_likelihoodfunccure", (DL_FUNC) &_CRFCSD_likelihoodfunccure, 10},
    {"_CRFCSD_Loglikelihoodcure", (DL_FUNC) &_CRFCSD_Loglikelihoodcure, 14},
    {"_CRFCSD_loglikelihoodtestcure", (DL_FUNC) &_CRFCSD_loglikelihoodtestcure, 10},
    {"_CRFCSD_likelihoodfunc1", (DL_FUNC) &_CRFCSD_likelihoodfunc1, 10},
    {"_CRFCSD_testquadrature1", (DL_FUNC) &_CRFCSD_testquadrature1, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_CRFCSD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
